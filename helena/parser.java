
//----------------------------------------------------
// The following code was generated by CUP v0.10f
// Mon Oct 09 17:14:07 PDT 2000
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;

public class parser extends java_cup.runtime.lr_parser {

  /** constructor */
  public parser() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {3, 3},     {0, 2},     {3, 3},     {3, 3},     {3, 3}, 
        {3, 2},     {3, 1},     {2, 2},     {2, 1},     {1, 1}, 
        {1, 1},     {1, 3}  };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{3,5,7,7,9,8,10,4,-1,0},
    /*1*/{0,-7,2,-7,3,-7,4,-7,5,-7,7,7,8,-7,9,8,10,4,-1,0},
    /*2*/{0,-9,2,-9,3,-9,4,-9,5,-9,7,-9,8,-9,9,-9,10,-9,-1,0},
    /*3*/{0,-10,2,-10,3,-10,4,-10,5,-10,7,-10,8,-10,9,-10,10,-10,-1,0},
    /*4*/{3,5,7,7,9,8,10,4,-1,0},
    /*5*/{0,19,2,11,3,12,4,14,5,13,-1,0},
    /*6*/{3,5,7,7,9,8,10,4,-1,0},
    /*7*/{0,-11,2,-11,3,-11,4,-11,5,-11,7,-11,8,-11,9,-11,10,-11,-1,0},
    /*8*/{2,11,3,12,4,14,5,13,8,10,-1,0},
    /*9*/{0,-12,2,-12,3,-12,4,-12,5,-12,7,-12,8,-12,9,-12,10,-12,-1,0},
    /*10*/{3,5,7,7,9,8,10,4,-1,0},
    /*11*/{3,5,7,7,9,8,10,4,-1,0},
    /*12*/{3,5,7,7,9,8,10,4,-1,0},
    /*13*/{3,5,7,7,9,8,10,4,-1,0},
    /*14*/{0,-4,2,-4,3,-4,4,-4,5,-4,8,-4,-1,0},
    /*15*/{0,-5,2,-5,3,-5,4,-5,5,-5,8,-5,-1,0},
    /*16*/{0,-3,2,-3,3,-3,4,14,5,13,8,-3,-1,0},
    /*17*/{0,-1,2,-1,3,-1,4,14,5,13,8,-1,-1,0},
    /*18*/{0,-2,-1,0},
    /*19*/{0,-6,2,-6,3,-6,4,-6,5,-6,8,-6,-1,0},
    /*20*/{0,-8,2,-8,3,-8,4,-8,5,-8,7,-8,8,-8,9,-8,10,-8,-1,0},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{1,2,2,1,3,5,-1,-1},
    /*1*/{1,20,-1,-1},
    /*2*/{-1,-1},
    /*3*/{-1,-1},
    /*4*/{1,2,2,1,3,19,-1,-1},
    /*5*/{-1,-1},
    /*6*/{1,2,2,1,3,8,-1,-1},
    /*7*/{-1,-1},
    /*8*/{-1,-1},
    /*9*/{-1,-1},
    /*10*/{1,2,2,1,3,17,-1,-1},
    /*11*/{1,2,2,1,3,16,-1,-1},
    /*12*/{1,2,2,1,3,15,-1,-1},
    /*13*/{1,2,2,1,3,14,-1,-1},
    /*14*/{-1,-1},
    /*15*/{-1,-1},
    /*16*/{-1,-1},
    /*17*/{-1,-1},
    /*18*/{-1,-1},
    /*19*/{-1,-1},
    /*20*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$actions();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 1;}

  /** EOF Symbol index */
  public int EOF_sym() {return 0;}

  /** error Symbol index */
  public int error_sym() {return 1;}



	public Vector getOpcodeStack()
	{
		return ((CUP$actions)action_obj).getOpcodeStack();
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$actions {


	Vector opcodeStack = new Vector();
	
	public Vector getOpcodeStack()
	{
		return opcodeStack;
	}
	
	void pushOpcode( int opcode )
	{
		pushOpcode( opcode, null );
	}
	
	void pushOpcode( int opcode, Object val )
	{
		System.out.println("Opcode "+opcode+" val="+val);
		
		double ival=0;
		
		try
		{
			if( (val != null) && (val instanceof String) )
			{
				ival = (Double.valueOf((String)val)).doubleValue();
			}
		}
		
		catch( Exception e )
		{
		}
		
		opcodeStack.addElement( new Opcode(opcode,ival) );
	}


  /** Constructor */
  CUP$actions() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java_cup.runtime.lr_parser CUP$parser,
    java.util.Stack            CUP$stack,
    int                        CUP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$result;

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // term ::= LPAREN expr RPAREN 
            {
              Object RESULT = null;

              CUP$result = new java_cup.runtime.Symbol(1/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // term ::= VARIABLE 
            {
              Object RESULT = null;
		 pushOpcode(sym.VARIABLE); 
              CUP$result = new java_cup.runtime.Symbol(1/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // term ::= NUMBER 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 pushOpcode(sym.NUMBER,e1); 
              CUP$result = new java_cup.runtime.Symbol(1/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lterm ::= term 
            {
              Object RESULT = null;

              CUP$result = new java_cup.runtime.Symbol(2/*lterm*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lterm ::= lterm term 
            {
              Object RESULT = null;
		 pushOpcode(sym.TIMES);; 
              CUP$result = new java_cup.runtime.Symbol(2/*lterm*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= lterm 
            {
              Vector RESULT = null;

              CUP$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= MINUS expr 
            {
              Vector RESULT = null;
		 pushOpcode(sym.UMINUS); 
              CUP$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= expr DIVIDE expr 
            {
              Vector RESULT = null;
		 pushOpcode(sym.DIVIDE); 
              CUP$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= expr TIMES expr 
            {
              Vector RESULT = null;
		 pushOpcode(sym.TIMES); 
              CUP$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= expr MINUS expr 
            {
              Vector RESULT = null;
		 pushOpcode(sym.MINUS); 
              CUP$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr EOF 
            {
              Object RESULT = null;

              CUP$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser.done_parsing();
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr ::= expr PLUS expr 
            {
              Vector RESULT = null;
		 pushOpcode(sym.PLUS); 
              CUP$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

