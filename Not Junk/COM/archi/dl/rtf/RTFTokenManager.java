package COM.archi.dl.rtf;

/* Generated By:JavaCC: Do not edit this line. RTFTokenManager.java */
//package COM.archi.dl.rtf;

import java.awt.*;
import java.io.*;

public class RTFTokenManager implements RTFConstants
{
  protected static final String jjadd_escapes(String str) {
    String retval = "";
    char ch;
    for (int i = 0; i < str.length(); i++) {
      if ((ch = str.charAt(i)) == 0) continue;
      if (ch == '\b') {
        retval += "\\b";
      } else if (ch == '\t') {
        retval += "\\t";
      } else if (ch == '\n') {
        retval += "\\n";
      } else if (ch == '\f') {
        retval += "\\f";
      } else if (ch == '\r') {
        retval += "\\r";
      } else if (ch == '\"') {
        retval += "\\\"";
      } else if (ch == '\'') {
        retval += "\\\'";
      } else if (ch == '\\') {
        retval += "\\\\";
      } else if (ch < 0x20 || ch > 0x7e) {
        String s = "0000" + Integer.toString(ch, 16);
        retval += "\\u" + s.substring(s.length() - 4, s.length());
      } else {
        retval += ch;
      }
    }
    return retval;
  }

private final void jjMoveNfa_1(int[] oldStates, int[] newStates)
{
   int j, k;
   MainLoop :
   for (;;)
   {
      if (curChar < 64)
      {
         int i = jjnewStateCnt;
         jjnewStateCnt = 0;
         jjround++;
         long l = 1L << curChar;
         do
         {
            switch(oldStates[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 1;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 37)
                        jjcurKind = 37;
                     continue;
                  }
                  else continue;
               default : continue;
            }
         } while(i != 0);
      }
      else if (curChar < 128)
      {
         int i = jjnewStateCnt;
         jjnewStateCnt = 0;
         jjround++;
         long l = 1L << (curChar & 077);
         do
         {
            switch(oldStates[--i])
            {
               case 0:
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 1;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 1:
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (jjcurKind > 37)
                        jjcurKind = 37;
                     continue;
                  }
                  else continue;
               default : continue;
            }
         } while(i != 0);
      }
      else
      {
         jjnewStateCnt = 0;
         return;
      }
      return;
   }
}
int[] StopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1000000000L) != 0L)
            return jjstates0;
         return null;
      default : 
         return null;
   }
}
void jjStartNfa_1(int pos, long active0)
{
   if ((jjstartStateSet = StopStringLiteralDfa_1(pos, active0)) != null)
   {
      jjnewStateCnt = jjstartStateSet.length;
      jjMoveNfa_1(jjstartStateSet, jjstateSet2);
      if (jjcurKind != 2147483647)
      {
         matchedToken.kind = jjcurKind;
         jjmatchedPos = pos + 1;
         jjcurKind = 2147483647;
      }
   }
   return;
}
long jjnewActive_10 = 0L, jjoldActive_10 = 0L;
private final void jjMoveStringLiteralDfa0_1() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
         switch(curChar)
         {
            case 13: 
               matchedToken.kind = 34;
               jjoldActive_10 = 0x800000000L;
               break;
            case 10: 
               matchedToken.kind = 33;
               break ReturnLoop;
            case 0: 
               matchedToken.kind = 36;
               jjstartStateSet = jjstates0;
               break MainLoop;
            default : 
               curPos =  1;
               if (curChar < 128)
                  if ((jjstartStateSet = jjinitStates_1[curChar]) == null)
                     return;
               else 
                  jjstartStateSet = jjallInitStates_1;
               jjnewStateCnt = jjstartStateSet.length;
               jjMoveNfa_1(jjstartStateSet, jjstateSet2);
               if (jjcurKind != 2147483647)
               {
                  matchedToken.kind = jjcurKind;
                  jjcurKind = 2147483647;
               }
               return;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_1(0, jjoldActive_10); 
            curPos = 1;
            throw e;
         }
         jjMoveStringLiteralDfa1_1();
         return;
    }
    curPos = 1;
    curChar = input_stream.readChar();
    jjnewStateCnt = jjstartStateSet.length;
    jjMoveNfa_1(jjstartStateSet, jjstateSet2);
    if (jjcurKind != 2147483647)
    {
       matchedToken.kind = jjcurKind;
       jjmatchedPos = 1;
       jjcurKind = 2147483647;
    }
    curPos = 2;
    return;
   }
   curPos = 1;
   return;
}
private final void jjMoveStringLiteralDfa1_1() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 10: 
               if ((jjoldActive_10 & 0x800000000L) != 0L)
               {
                  matchedToken.kind = 35;
                  break ReturnLoop;
               }
               break StartNfaLoop;
            default : 
               break StartNfaLoop;
         }
      }
      jjStartNfa_1(0, jjoldActive_10); 
      curPos = 2;
      return;
    }
   }
   jjmatchedPos = 1;
   curPos = 2;
   return;
}
static final int[] jjstates0 = { 1, };
static final int[] jjallInitStates_1 = { 0, };
static final int[][] jjinitStates_1 = {
jjallInitStates_1, null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, null, null, null, 
null, null, null, null, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, };

static final long[] jjbitVec0 = { 0x1L, 0x0L,
              0xffffffffffffffffL, 0xffffffffffffffffL };
private final void jjMoveNfa_2(int[] oldStates, int[] newStates)
{
   int j, k;
   MainLoop :
   for (;;)
   {
      if (curChar < 64)
      {
         int i = jjnewStateCnt;
         jjnewStateCnt = 0;
         jjround++;
         long l = 1L << curChar;
         do
         {
            switch(oldStates[--i])
            {
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 44)
                        jjcurKind = 44;
                     newStates[jjnewStateCnt + 0] = 5;
                     newStates[jjnewStateCnt + 1] = 6;
                     jjnewStateCnt += 2;
                     continue;
                  }
                  else continue;
               case 6:
                  if ((0x100000000L & l) != 0L)
                  {
                     if (jjcurKind > 44)
                        jjcurKind = 44;
                     continue;
                  }
                  else continue;
               case 0:
                  if ((0xf7ffffffffffdbfeL & l) != 0L)
                  {
                     if (jjcurKind > 53)
                        jjcurKind = 53;
                     newStates[jjnewStateCnt + 0] = 0;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 8:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 54)
                        jjcurKind = 54;
                     jjnextStates = jjstates3;
                     break;
                  }
                  else continue;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 54)
                        jjcurKind = 54;
                     jjnextStates = jjstates3;
                     break;
                  }
                  else continue;
               case 10:
                  if ((0x100000000L & l) != 0L)
                  {
                     if (jjcurKind > 54)
                        jjcurKind = 54;
                     continue;
                  }
                  else continue;
               case 1:
                  if ((0x800000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 43)
                        jjcurKind = 43;
                     newStates[jjnewStateCnt++] = 2;
                     return;
                  }
                  else continue;
               default : continue;
            }
            j = jjnextStates.length;
            do
            {
               if (jjrounds[k = jjnextStates[--j]] != jjround)
               {
                  jjrounds[k] = jjround;
                  newStates[jjnewStateCnt++] = k;
               }
            } while (j != 0);
         } while(i != 0);
      }
      else if (curChar < 128)
      {
         int i = jjnewStateCnt;
         jjnewStateCnt = 0;
         jjround++;
         long l = 1L << (curChar & 077);
         do
         {
            switch(oldStates[--i])
            {
               case 2:
                  if ((0x2000000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 43)
                        jjcurKind = 43;
                     return;
                  }
                  else continue;
               case 4:
                  if ((0x4000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 5;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 0:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (jjcurKind > 53)
                        jjcurKind = 53;
                     newStates[jjnewStateCnt + 0] = 0;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 7:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (jjcurKind > 54)
                        jjcurKind = 54;
                     jjnextStates = jjstates4;
                     break;
                  }
                  else continue;
               case 3:
                  if ((0x10000000L & l) != 0L)
                  {
                     jjnextStates = jjstates5;
                     break MainLoop;;
                  }
                  else continue;
               default : continue;
            }
            j = jjnextStates.length;
            do
            {
               if (jjrounds[k = jjnextStates[--j]] != jjround)
               {
                  jjrounds[k] = jjround;
                  newStates[jjnewStateCnt++] = k;
               }
            } while (j != 0);
         } while(i != 0);
      }
      else
      {
         int i = jjnewStateCnt;
         jjnewStateCnt = 0;
         jjround++;
         int i2 = (curChar & 0xff) >> 6;
         int i1 = ((curChar >> 8) & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         long l1 = 1L << ((curChar >> 8) & 077);
         Outer:
         do
         {
            switch(oldStates[--i])
            {
               case 0:
                  MatchLoop:
                  for(;;)
                  {
                     switch((curChar >> 8))
                     {
                        case 0:
                           if ((jjbitVec0[i2] & l2) == 0L)
                              continue Outer;
                           break MatchLoop;
                        default : break;
                     }
                     continue Outer;
                  }
                  if (jjcurKind > 53)
                     jjcurKind = 53;
                     newStates[jjnewStateCnt + 0] = 0;
                     jjnewStateCnt += 1;
                     continue;
               default : continue;
            }
         } while(i != 0);
      }
      return;
   }
   j = jjnextStates.length;
   do
   {
      if (jjrounds[k = jjnextStates[--j]] != jjround)
      {
         jjrounds[k] = jjround;
         newStates[jjnewStateCnt++] = k;
      }
   } while (j != 0);
}
int[] StopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1fe00000000000L) != 0L)
            return jjstates5;
         if ((active0 & 0x20000000000L) != 0L)
            return jjstates7;
         return null;
      case 1:
         if ((active0 & 0x1fe00000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               matchedToken.kind = 54;
               jjmatchedPos = 1;
            }
            return jjstates8;
         }
         return null;
      case 2:
         if ((active0 & 0x1fe00000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               matchedToken.kind = 54;
               jjmatchedPos = 2;
            }
            return jjstates4;
         }
         return null;
      case 3:
         if ((active0 & 0x1fe00000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               matchedToken.kind = 54;
               jjmatchedPos = 3;
            }
            return jjstates4;
         }
         return null;
      case 4:
         if ((active0 & 0x1fe00000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               matchedToken.kind = 54;
               jjmatchedPos = 4;
            }
            return jjstates4;
         }
         return null;
      case 5:
         if ((active0 & 0x1fc00000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               matchedToken.kind = 54;
               jjmatchedPos = 5;
            }
            return jjstates4;
         }
         return null;
      case 6:
         if ((active0 & 0x7c00000000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               matchedToken.kind = 54;
               jjmatchedPos = 6;
            }
            return jjstates4;
         }
         return null;
      case 7:
         if ((active0 & 0x5000000000000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               matchedToken.kind = 54;
               jjmatchedPos = 7;
            }
            return jjstates4;
         }
         return null;
      default : 
         return null;
   }
}
void jjStartNfa_2(int pos, long active0)
{
   if ((jjstartStateSet = StopStringLiteralDfa_2(pos, active0)) != null)
   {
      jjnewStateCnt = jjstartStateSet.length;
      jjMoveNfa_2(jjstartStateSet, jjstateSet2);
      if (jjcurKind != 2147483647)
      {
         matchedToken.kind = jjcurKind;
         jjmatchedPos = pos + 1;
         jjcurKind = 2147483647;
      }
   }
   return;
}
long jjnewActive_20 = 0L, jjoldActive_20 = 0L;
private final void jjMoveStringLiteralDfa0_2() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
         switch(curChar)
         {
            case 92: 
               jjoldActive_20 = 0x1fe00000000000L;
               break;
            case 125: 
               matchedToken.kind = 55;
               break ReturnLoop;
            case 123: 
               matchedToken.kind = 42;
               break ReturnLoop;
            case 13: 
               matchedToken.kind = 39;
               jjoldActive_20 = 0x10000000000L;
               break;
            case 10: 
               matchedToken.kind = 38;
               break ReturnLoop;
            case 0: 
               matchedToken.kind = 41;
               jjstartStateSet = jjstates7;
               break MainLoop;
            default : 
               curPos =  1;
               if (curChar < 128)
                  if ((jjstartStateSet = jjinitStates_2[curChar]) == null)
                     return;
               else 
                  jjstartStateSet = jjallInitStates_2;
               jjnewStateCnt = jjstartStateSet.length;
               jjMoveNfa_2(jjstartStateSet, jjstateSet2);
               if (jjcurKind != 2147483647)
               {
                  matchedToken.kind = jjcurKind;
                  jjcurKind = 2147483647;
               }
               return;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_2(0, jjoldActive_20); 
            curPos = 1;
            throw e;
         }
         jjMoveStringLiteralDfa1_2();
         return;
    }
    curPos = 1;
    curChar = input_stream.readChar();
    jjnewStateCnt = jjstartStateSet.length;
    jjMoveNfa_2(jjstartStateSet, jjstateSet2);
    if (jjcurKind != 2147483647)
    {
       matchedToken.kind = jjcurKind;
       jjmatchedPos = 1;
       jjcurKind = 2147483647;
    }
    curPos = 2;
    return;
   }
   curPos = 1;
   return;
}
private final void jjMoveStringLiteralDfa1_2() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 10: 
               if ((jjoldActive_20 & 0x10000000000L) != 0L)
               {
                  matchedToken.kind = 40;
                  break ReturnLoop;
               }
               break StartNfaLoop;
            case 102: 
               if (((jjnewActive_20 = jjoldActive_20 & 0x1fe00000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_2(1, jjnewActive_20); 
            curPos = 2;
            throw e;
         }
         jjMoveStringLiteralDfa2_2();
         return;
      }
      jjStartNfa_2(0, jjoldActive_20); 
      curPos = 2;
      return;
    }
   }
   jjmatchedPos = 1;
   curPos = 2;
   return;
}
private final void jjMoveStringLiteralDfa2_2() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 100: 
               if (((jjoldActive_20 = jjnewActive_20 & 0x2000000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 98: 
               if (((jjoldActive_20 = jjnewActive_20 & 0x10000000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 116: 
               if (((jjoldActive_20 = jjnewActive_20 & 0x8000000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 115: 
               if (((jjoldActive_20 = jjnewActive_20 & 0x4800000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 114: 
               if (((jjoldActive_20 = jjnewActive_20 & 0x400000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 110: 
               if (((jjoldActive_20 = jjnewActive_20 & 0x200000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 109: 
               if (((jjoldActive_20 = jjnewActive_20 & 0x1000000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_2(2, jjoldActive_20); 
            curPos = 3;
            throw e;
         }
         jjMoveStringLiteralDfa3_2();
         return;
      }
      jjStartNfa_2(1, jjnewActive_20); 
      curPos = 3;
      return;
    }
   }
}
private final void jjMoveStringLiteralDfa3_2() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 99: 
               if (((jjnewActive_20 = jjoldActive_20 & 0x4000000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 119: 
               if (((jjnewActive_20 = jjoldActive_20 & 0x800000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 111: 
               if (((jjnewActive_20 = jjoldActive_20 & 0x1400000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 105: 
               if (((jjnewActive_20 = jjoldActive_20 & 0x10200000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 101: 
               if (((jjnewActive_20 = jjoldActive_20 & 0xa000000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_2(3, jjnewActive_20); 
            curPos = 4;
            throw e;
         }
         jjMoveStringLiteralDfa4_2();
         return;
      }
      jjStartNfa_2(2, jjoldActive_20); 
      curPos = 4;
      return;
    }
   }
}
private final void jjMoveStringLiteralDfa4_2() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 100: 
               if (((jjoldActive_20 = jjnewActive_20 & 0x11000000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 99: 
               if (((jjoldActive_20 = jjnewActive_20 & 0xa000000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 114: 
               if (((jjoldActive_20 = jjnewActive_20 & 0x4000000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 109: 
               if (((jjoldActive_20 = jjnewActive_20 & 0x400000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 108: 
               if (((jjoldActive_20 = jjnewActive_20 & 0x200000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 105: 
               if (((jjoldActive_20 = jjnewActive_20 & 0x800000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_2(4, jjoldActive_20); 
            curPos = 5;
            throw e;
         }
         jjMoveStringLiteralDfa5_2();
         return;
      }
      jjStartNfa_2(3, jjnewActive_20); 
      curPos = 5;
      return;
    }
   }
}
private final void jjMoveStringLiteralDfa5_2() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 97: 
               if (((jjnewActive_20 = jjoldActive_20 & 0x400000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 32: 
               if ((jjoldActive_20 & 0x200000000000L) != 0L)
               {
                  matchedToken.kind = 45;
                  break ReturnLoop;
               }
               break StartNfaLoop;
            case 115: 
               if (((jjnewActive_20 = jjoldActive_20 & 0x800000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 111: 
               if (((jjnewActive_20 = jjoldActive_20 & 0x2000000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 105: 
               if (((jjnewActive_20 = jjoldActive_20 & 0x14000000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 104: 
               if (((jjnewActive_20 = jjoldActive_20 & 0x8000000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 101: 
               if (((jjnewActive_20 = jjoldActive_20 & 0x1000000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_2(5, jjnewActive_20); 
            curPos = 6;
            throw e;
         }
         jjMoveStringLiteralDfa6_2();
         return;
      }
      jjStartNfa_2(4, jjoldActive_20); 
      curPos = 6;
      return;
    }
   }
   jjmatchedPos = 5;
   curPos = 6;
   return;
}
private final void jjMoveStringLiteralDfa6_2() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 32: 
               if ((jjnewActive_20 & 0x8000000000000L) != 0L)
               {
                  matchedToken.kind = 51;
                  break ReturnLoop;
               }
               else if ((jjnewActive_20 & 0x10000000000000L) != 0L)
               {
                  matchedToken.kind = 52;
                  break ReturnLoop;
               }
               break StartNfaLoop;
            case 115: 
               if (((jjoldActive_20 = jjnewActive_20 & 0x800000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 114: 
               if (((jjoldActive_20 = jjnewActive_20 & 0x3000000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 112: 
               if (((jjoldActive_20 = jjnewActive_20 & 0x4000000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 110: 
               if (((jjoldActive_20 = jjnewActive_20 & 0x400000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_2(6, jjoldActive_20); 
            curPos = 7;
            throw e;
         }
         jjMoveStringLiteralDfa7_2();
         return;
      }
      jjStartNfa_2(5, jjnewActive_20); 
      curPos = 7;
      return;
    }
   }
   jjmatchedPos = 6;
   curPos = 7;
   return;
}
private final void jjMoveStringLiteralDfa7_2() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 32: 
               if ((jjoldActive_20 & 0x400000000000L) != 0L)
               {
                  matchedToken.kind = 46;
                  break ReturnLoop;
               }
               else if ((jjoldActive_20 & 0x800000000000L) != 0L)
               {
                  matchedToken.kind = 47;
                  break ReturnLoop;
               }
               else if ((jjoldActive_20 & 0x2000000000000L) != 0L)
               {
                  matchedToken.kind = 49;
                  break ReturnLoop;
               }
               break StartNfaLoop;
            case 116: 
               if (((jjnewActive_20 = jjoldActive_20 & 0x4000000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 110: 
               if (((jjnewActive_20 = jjoldActive_20 & 0x1000000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_2(7, jjnewActive_20); 
            curPos = 8;
            throw e;
         }
         jjMoveStringLiteralDfa8_2();
         return;
      }
      jjStartNfa_2(6, jjoldActive_20); 
      curPos = 8;
      return;
    }
   }
   jjmatchedPos = 7;
   curPos = 8;
   return;
}
private final void jjMoveStringLiteralDfa8_2() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 32: 
               if ((jjnewActive_20 & 0x1000000000000L) != 0L)
               {
                  matchedToken.kind = 48;
                  break ReturnLoop;
               }
               else if ((jjnewActive_20 & 0x4000000000000L) != 0L)
               {
                  matchedToken.kind = 50;
                  break ReturnLoop;
               }
               break StartNfaLoop;
            default : 
               break StartNfaLoop;
         }
      }
      jjStartNfa_2(7, jjnewActive_20); 
      curPos = 9;
      return;
    }
   }
   jjmatchedPos = 8;
   curPos = 9;
   return;
}
static final int[] jjstates1 = { 5, 6, };
static final int[] jjstates2 = { 5, };
static final int[] jjstates3 = { 9, 10, };
static final int[] jjstates4 = { 7, 8, 9, 10, };
static final int[] jjstates5 = { 4, 7, };
static final int[] jjallInitStates_2 = { 0, 1, 3, };
static final int[] jjstates6 = { 3, };
static final int[] jjstates7 = { 2, 4, 0, 7, };
static final int[] jjstates8 = { 5, 7, 8, 9, 10, };
static final int[][] jjinitStates_2 = {
jjallInitStates_2, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, null, 
jjallInitStates_1, jjallInitStates_1, null, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjstates0, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjstates6, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, null, jjallInitStates_1, null, 
jjallInitStates_1, jjallInitStates_1, };

private final void jjMoveNfa_0(int[] oldStates, int[] newStates)
{
   int j, k;
   MainLoop :
   for (;;)
   {
      if (curChar < 64)
      {
         int i = jjnewStateCnt;
         jjnewStateCnt = 0;
         jjround++;
         long l = 1L << curChar;
         do
         {
            switch(oldStates[--i])
            {
               case 2:
                  if ((0x40000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     continue;
                  }
                  else continue;
               case 4:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates1;
                     break;
                  }
                  else continue;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates1;
                     break;
                  }
                  else continue;
               case 6:
                  if ((0x100000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     continue;
                  }
                  else continue;
               case 13:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates14;
                     break;
                  }
                  else continue;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates14;
                     break;
                  }
                  else continue;
               case 21:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates21;
                     break;
                  }
                  else continue;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates21;
                     break;
                  }
                  else continue;
               case 30:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates29;
                     break;
                  }
                  else continue;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates29;
                     break;
                  }
                  else continue;
               case 39:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates37;
                     break;
                  }
                  else continue;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates37;
                     break;
                  }
                  else continue;
               case 48:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates45;
                     break;
                  }
                  else continue;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates45;
                     break;
                  }
                  else continue;
               case 56:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates52;
                     break;
                  }
                  else continue;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates52;
                     break;
                  }
                  else continue;
               case 65:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates60;
                     break;
                  }
                  else continue;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates60;
                     break;
                  }
                  else continue;
               case 74:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates68;
                     break;
                  }
                  else continue;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates68;
                     break;
                  }
                  else continue;
               case 83:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates76;
                     break;
                  }
                  else continue;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates76;
                     break;
                  }
                  else continue;
               case 93:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates85;
                     break;
                  }
                  else continue;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates85;
                     break;
                  }
                  else continue;
               case 100:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates91;
                     break;
                  }
                  else continue;
               case 101:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates91;
                     break;
                  }
                  else continue;
               case 108:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates98;
                     break;
                  }
                  else continue;
               case 109:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates98;
                     break;
                  }
                  else continue;
               case 117:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates106;
                     break;
                  }
                  else continue;
               case 118:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates106;
                     break;
                  }
                  else continue;
               case 125:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates113;
                     break;
                  }
                  else continue;
               case 126:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates113;
                     break;
                  }
                  else continue;
               case 134:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates121;
                     break;
                  }
                  else continue;
               case 135:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates121;
                     break;
                  }
                  else continue;
               case 143:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates129;
                     break;
                  }
                  else continue;
               case 144:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates129;
                     break;
                  }
                  else continue;
               case 152:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates137;
                     break;
                  }
                  else continue;
               case 153:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates137;
                     break;
                  }
                  else continue;
               case 158:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates142;
                     break;
                  }
                  else continue;
               case 159:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates142;
                     break;
                  }
                  else continue;
               case 168:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates151;
                     break;
                  }
                  else continue;
               case 169:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates151;
                     break;
                  }
                  else continue;
               case 178:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates160;
                     break;
                  }
                  else continue;
               case 179:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates160;
                     break;
                  }
                  else continue;
               case 184:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates165;
                     break;
                  }
                  else continue;
               case 185:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates165;
                     break;
                  }
                  else continue;
               case 193:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates173;
                     break;
                  }
                  else continue;
               case 194:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates173;
                     break;
                  }
                  else continue;
               case 202:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates181;
                     break;
                  }
                  else continue;
               case 203:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates181;
                     break;
                  }
                  else continue;
               case 210:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates188;
                     break;
                  }
                  else continue;
               case 211:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates188;
                     break;
                  }
                  else continue;
               case 215:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates192;
                     break;
                  }
                  else continue;
               case 216:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates192;
                     break;
                  }
                  else continue;
               case 227:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates203;
                     break;
                  }
                  else continue;
               case 228:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates203;
                     break;
                  }
                  else continue;
               case 236:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates211;
                     break;
                  }
                  else continue;
               case 237:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates211;
                     break;
                  }
                  else continue;
               case 240:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates214;
                     break;
                  }
                  else continue;
               case 241:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates214;
                     break;
                  }
                  else continue;
               case 247:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates220;
                     break;
                  }
                  else continue;
               case 248:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates220;
                     break;
                  }
                  else continue;
               case 252:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates224;
                     break;
                  }
                  else continue;
               case 253:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates224;
                     break;
                  }
                  else continue;
               case 256:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 11)
                        jjcurKind = 11;
                     newStates[jjnewStateCnt + 0] = 256;
                     newStates[jjnewStateCnt + 1] = 257;
                     jjnewStateCnt += 2;
                     continue;
                  }
                  else continue;
               case 257:
                  if ((0x100000000L & l) != 0L)
                  {
                     if (jjcurKind > 11)
                        jjcurKind = 11;
                     continue;
                  }
                  else continue;
               case 259:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 12)
                        jjcurKind = 12;
                     newStates[jjnewStateCnt + 0] = 259;
                     newStates[jjnewStateCnt + 1] = 260;
                     jjnewStateCnt += 2;
                     continue;
                  }
                  else continue;
               case 260:
                  if ((0x100000000L & l) != 0L)
                  {
                     if (jjcurKind > 12)
                        jjcurKind = 12;
                     continue;
                  }
                  else continue;
               case 263:
                  if ((0x100000000L & l) != 0L)
                  {
                     if (jjcurKind > 13)
                        jjcurKind = 13;
                     continue;
                  }
                  else continue;
               case 267:
                  if ((0x100000000L & l) != 0L)
                  {
                     if (jjcurKind > 14)
                        jjcurKind = 14;
                     continue;
                  }
                  else continue;
               case 272:
                  if ((0x100000000L & l) != 0L)
                  {
                     if (jjcurKind > 15)
                        jjcurKind = 15;
                     continue;
                  }
                  else continue;
               case 278:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 16)
                        jjcurKind = 16;
                     newStates[jjnewStateCnt + 0] = 279;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 279:
                  if ((0x100000000L & l) != 0L)
                  {
                     if (jjcurKind > 16)
                        jjcurKind = 16;
                     continue;
                  }
                  else continue;
               case 281:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 17)
                        jjcurKind = 17;
                     newStates[jjnewStateCnt + 0] = 282;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 282:
                  if ((0x100000000L & l) != 0L)
                  {
                     if (jjcurKind > 17)
                        jjcurKind = 17;
                     continue;
                  }
                  else continue;
               case 285:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 18)
                        jjcurKind = 18;
                     newStates[jjnewStateCnt + 0] = 286;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 286:
                  if ((0x100000000L & l) != 0L)
                  {
                     if (jjcurKind > 18)
                        jjcurKind = 18;
                     continue;
                  }
                  else continue;
               case 289:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 19)
                        jjcurKind = 19;
                     newStates[jjnewStateCnt + 0] = 289;
                     newStates[jjnewStateCnt + 1] = 290;
                     jjnewStateCnt += 2;
                     continue;
                  }
                  else continue;
               case 290:
                  if ((0x100000000L & l) != 0L)
                  {
                     if (jjcurKind > 19)
                        jjcurKind = 19;
                     continue;
                  }
                  else continue;
               case 293:
                  if ((0x100000000L & l) != 0L)
                  {
                     if (jjcurKind > 20)
                        jjcurKind = 20;
                     continue;
                  }
                  else continue;
               case 296:
                  if ((0x100000000L & l) != 0L)
                  {
                     if (jjcurKind > 21)
                        jjcurKind = 21;
                     continue;
                  }
                  else continue;
               case 299:
                  if ((0x100000000L & l) != 0L)
                  {
                     if (jjcurKind > 22)
                        jjcurKind = 22;
                     continue;
                  }
                  else continue;
               case 302:
                  if ((0x100000000L & l) != 0L)
                  {
                     if (jjcurKind > 23)
                        jjcurKind = 23;
                     continue;
                  }
                  else continue;
               case 305:
                  if ((0x200000000000L & l) != 0L)
                  {
                     jjnextStates = jjstates263;
                     break;
                  }
                  else continue;
               case 306:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 24)
                        jjcurKind = 24;
                     jjnextStates = jjstates262;
                     break;
                  }
                  else continue;
               case 307:
                  if ((0x100000000L & l) != 0L)
                  {
                     if (jjcurKind > 24)
                        jjcurKind = 24;
                     continue;
                  }
                  else continue;
               case 310:
                  if ((0x200000000000L & l) != 0L)
                  {
                     jjnextStates = jjstates267;
                     break;
                  }
                  else continue;
               case 311:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 25)
                        jjcurKind = 25;
                     jjnextStates = jjstates266;
                     break;
                  }
                  else continue;
               case 312:
                  if ((0x100000000L & l) != 0L)
                  {
                     if (jjcurKind > 25)
                        jjcurKind = 25;
                     continue;
                  }
                  else continue;
               case 315:
                  if ((0x200000000000L & l) != 0L)
                  {
                     jjnextStates = jjstates271;
                     break;
                  }
                  else continue;
               case 316:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 26)
                        jjcurKind = 26;
                     jjnextStates = jjstates270;
                     break;
                  }
                  else continue;
               case 317:
                  if ((0x100000000L & l) != 0L)
                  {
                     if (jjcurKind > 26)
                        jjcurKind = 26;
                     continue;
                  }
                  else continue;
               case 320:
                  if ((0x200000000000L & l) != 0L)
                  {
                     jjnextStates = jjstates275;
                     break;
                  }
                  else continue;
               case 321:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 27)
                        jjcurKind = 27;
                     jjnextStates = jjstates274;
                     break;
                  }
                  else continue;
               case 322:
                  if ((0x100000000L & l) != 0L)
                  {
                     if (jjcurKind > 27)
                        jjcurKind = 27;
                     continue;
                  }
                  else continue;
               case 325:
                  if ((0x200000000000L & l) != 0L)
                  {
                     jjnextStates = jjstates279;
                     break;
                  }
                  else continue;
               case 326:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 28)
                        jjcurKind = 28;
                     jjnextStates = jjstates278;
                     break;
                  }
                  else continue;
               case 327:
                  if ((0x100000000L & l) != 0L)
                  {
                     if (jjcurKind > 28)
                        jjcurKind = 28;
                     continue;
                  }
                  else continue;
               case 330:
                  if ((0x200000000000L & l) != 0L)
                  {
                     jjnextStates = jjstates283;
                     break;
                  }
                  else continue;
               case 331:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 29)
                        jjcurKind = 29;
                     jjnextStates = jjstates282;
                     break;
                  }
                  else continue;
               case 332:
                  if ((0x100000000L & l) != 0L)
                  {
                     if (jjcurKind > 29)
                        jjcurKind = 29;
                     continue;
                  }
                  else continue;
               case 0:
                  if ((0xffffffffffffdbfeL & l) != 0L)
                  {
                     if (jjcurKind > 30)
                        jjcurKind = 30;
                     newStates[jjnewStateCnt + 0] = 0;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 334:
                     if (jjcurKind > 31)
                        jjcurKind = 31;
                     continue;
               case 336:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 32)
                        jjcurKind = 32;
                     jjnextStates = jjstates286;
                     break;
                  }
                  else continue;
               case 337:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 32)
                        jjcurKind = 32;
                     jjnextStates = jjstates286;
                     break;
                  }
                  else continue;
               case 338:
                  if ((0x100000000L & l) != 0L)
                  {
                     if (jjcurKind > 32)
                        jjcurKind = 32;
                     continue;
                  }
                  else continue;
               default : continue;
            }
            j = jjnextStates.length;
            do
            {
               if (jjrounds[k = jjnextStates[--j]] != jjround)
               {
                  jjrounds[k] = jjround;
                  newStates[jjnewStateCnt++] = k;
               }
            } while (j != 0);
         } while(i != 0);
      }
      else if (curChar < 128)
      {
         int i = jjnewStateCnt;
         jjnewStateCnt = 0;
         jjround++;
         long l = 1L << (curChar & 077);
         do
         {
            switch(oldStates[--i])
            {
               case 11:
                  if ((0x200000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 10;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 10:
                  if ((0x20000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 9;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 9:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 8;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 8:
                  if ((0x10000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 7;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 7:
                  if ((0x800000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 3;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 3:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates9;
                     break;
                  }
                  else continue;
               case 19:
                  if ((0x400000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 18;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 18:
                  if ((0x20000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 17;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 17:
                  if ((0x1000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 16;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 16:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 15;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 15:
                  if ((0x20000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 12;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 12:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates15;
                     break;
                  }
                  else continue;
               case 28:
                  if ((0x800000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 27;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 27:
                  if ((0x800000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 26;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 26:
                  if ((0x200000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 25;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 25:
                  if ((0x200000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 24;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 24:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 23;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 23:
                  if ((0x400000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 20;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 20:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates22;
                     break;
                  }
                  else continue;
               case 37:
                  if ((0x800000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 36;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 36:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 35;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 35:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 34;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 34:
                  if ((0x200000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 33;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 33:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 32;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 32:
                  if ((0x20000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 29;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 29:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates30;
                     break;
                  }
                  else continue;
               case 46:
                  if ((0x1000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 45;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 45:
                  if ((0x800000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 44;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 44:
                  if ((0x800000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 43;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 43:
                  if ((0x800000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 42;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 42:
                  if ((0x800000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 41;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 41:
                  if ((0x200000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 38;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 38:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates38;
                     break;
                  }
                  else continue;
               case 54:
                  if ((0x4000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 53;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 53:
                  if ((0x800000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 52;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 52:
                  if ((0x800000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 51;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 51:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 50;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 50:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 47;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 47:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates46;
                     break;
                  }
                  else continue;
               case 63:
                  if ((0x4000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 62;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 62:
                  if ((0x800000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 61;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 61:
                  if ((0x800000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 60;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 60:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 59;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 59:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 58;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 58:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 55;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 55:
                  if ((0x4000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates53;
                     break;
                  }
                  else continue;
               case 72:
                  if ((0x4000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 71;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 71:
                  if ((0x800000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 70;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 70:
                  if ((0x800000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 69;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 69:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 68;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 68:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 67;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 67:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 64;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 64:
                  if ((0x100000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates61;
                     break;
                  }
                  else continue;
               case 81:
                  if ((0x4000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 80;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 80:
                  if ((0x800000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 79;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 79:
                  if ((0x800000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 78;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 78:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 77;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 77:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 76;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 76:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 73;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 73:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates69;
                     break;
                  }
                  else continue;
               case 91:
                  if ((0x4000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 90;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 90:
                  if ((0x800000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 89;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 89:
                  if ((0x800000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 88;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 88:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 87;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 87:
                  if ((0x400000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 86;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 86:
                  if ((0x800000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 85;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 85:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 82;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 82:
                  if ((0x2000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates77;
                     break;
                  }
                  else continue;
               case 98:
                  if ((0x4000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 97;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 97:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 96;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 96:
                  if ((0x400000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 95;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 95:
                  if ((0x800000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 92;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 92:
                  if ((0x400000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates86;
                     break;
                  }
                  else continue;
               case 106:
                  if ((0x4000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 105;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 105:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 104;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 104:
                  if ((0x400000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 103;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 103:
                  if ((0x8000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 102;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 102:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 99;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 99:
                  if ((0x1000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates92;
                     break;
                  }
                  else continue;
               case 115:
                  if ((0x4000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 114;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 114:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 113;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 113:
                  if ((0x400000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 112;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 112:
                  if ((0x8000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 111;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 111:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 110;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 110:
                  if ((0x1000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 107;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 107:
                  if ((0x800000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates99;
                     break;
                  }
                  else continue;
               case 123:
                  if ((0x10000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 122;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 122:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 121;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 121:
                  if ((0x200000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 120;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 120:
                  if ((0x1000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 119;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 119:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 116;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 116:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates107;
                     break;
                  }
                  else continue;
               case 132:
                  if ((0x10000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 131;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 131:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 130;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 130:
                  if ((0x200000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 129;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 129:
                  if ((0x1000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 128;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 128:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 127;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 127:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 124;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 124:
                  if ((0x4000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates114;
                     break;
                  }
                  else continue;
               case 141:
                  if ((0x10000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 140;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 140:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 139;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 139:
                  if ((0x200000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 138;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 138:
                  if ((0x1000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 137;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 137:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 136;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 136:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 133;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 133:
                  if ((0x100000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates122;
                     break;
                  }
                  else continue;
               case 150:
                  if ((0x10000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 149;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 149:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 148;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 148:
                  if ((0x200000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 147;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 147:
                  if ((0x1000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 146;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 146:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 145;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 145:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 142;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 142:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates130;
                     break;
                  }
                  else continue;
               case 156:
                  if ((0x20000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 155;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 155:
                  if ((0x400000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 154;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 154:
                  if ((0x4000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 151;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 151:
                  if ((0x800000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates138;
                     break;
                  }
                  else continue;
               case 166:
                  if ((0x80000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 165;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 165:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 164;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 164:
                  if ((0x200000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 163;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 163:
                  if ((0x80000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 162;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 162:
                  if ((0x800000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 161;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 161:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 160;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 160:
                  if ((0x1000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 157;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 157:
                  if ((0x8000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates143;
                     break;
                  }
                  else continue;
               case 176:
                  if ((0x800000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 175;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 175:
                  if ((0x1000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 174;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 174:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 173;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 173:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 172;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 172:
                  if ((0x200000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 171;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 171:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 170;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 170:
                  if ((0x800000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 167;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 167:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates152;
                     break;
                  }
                  else continue;
               case 182:
                  if ((0x1000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 181;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 181:
                  if ((0x20000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 180;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 180:
                  if ((0x800000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 177;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 177:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates161;
                     break;
                  }
                  else continue;
               case 191:
                  if ((0x1000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 190;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 190:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 189;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 189:
                  if ((0x20000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 188;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 188:
                  if ((0x400000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 187;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 187:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 186;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 186:
                  if ((0x20000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 183;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 183:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates166;
                     break;
                  }
                  else continue;
               case 200:
                  if ((0x1000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 199;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 199:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 198;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 198:
                  if ((0x20000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 197;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 197:
                  if ((0x40000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 196;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 196:
                  if ((0x200000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 195;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 195:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 192;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 192:
                  if ((0x2000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates174;
                     break;
                  }
                  else continue;
               case 208:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 207;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 207:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 206;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 206:
                  if ((0x40000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 205;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 205:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 204;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 204:
                  if ((0x20000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 201;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 201:
                  if ((0x200000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates182;
                     break;
                  }
                  else continue;
               case 213:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 212;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 212:
                  if ((0x100000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 209;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 209:
                  if ((0x2000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates189;
                     break;
                  }
                  else continue;
               case 225:
                  if ((0x8000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 224;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 224:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 223;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 223:
                  if ((0x200000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 222;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 222:
                  if ((0x100000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 221;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 221:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 220;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 220:
                  if ((0x8000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 219;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 219:
                  if ((0x10000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 218;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 218:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 217;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 217:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 214;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 214:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates193;
                     break;
                  }
                  else continue;
               case 234:
                  if ((0x8000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 233;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 233:
                  if ((0x20000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 232;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 232:
                  if ((0x400000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 231;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 231:
                  if ((0x40000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 230;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 230:
                  if ((0x2000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 229;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 229:
                  if ((0x800000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 226;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 226:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates204;
                     break;
                  }
                  else continue;
               case 238:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 235;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 235:
                  if ((0x800000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates212;
                     break;
                  }
                  else continue;
               case 245:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 244;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 244:
                  if ((0x20000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 243;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 243:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 242;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 242:
                  if ((0x100000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 239;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 239:
                  if ((0x2000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates215;
                     break;
                  }
                  else continue;
               case 250:
                  if ((0x10000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 249;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 249:
                  if ((0x100000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 246;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 246:
                  if ((0x2000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates221;
                     break;
                  }
                  else continue;
               case 254:
                  if ((0x100000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 251;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 251:
                  if ((0x2000000000L & l) != 0L)
                  {
                     if (jjcurKind > 9)
                        jjcurKind = 9;
                     jjnextStates = jjstates225;
                     break;
                  }
                  else continue;
               case 255:
                  if ((0x4000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 256;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 261:
                  if ((0x4000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 258;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 258:
                  if ((0x8000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 259;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 265:
                  if ((0x1000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 264;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 264:
                  if ((0x200000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 262;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 262:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 13)
                        jjcurKind = 13;
                     newStates[jjnewStateCnt + 0] = 263;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 270:
                  if ((0x1000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 269;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 269:
                  if ((0x200000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 268;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 268:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 266;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 266:
                  if ((0x1000000000L & l) != 0L)
                  {
                     if (jjcurKind > 14)
                        jjcurKind = 14;
                     newStates[jjnewStateCnt + 0] = 267;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 276:
                  if ((0x1000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 275;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 275:
                  if ((0x100000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 274;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 274:
                  if ((0x200000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 273;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 273:
                  if ((0x20000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 271;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 271:
                  if ((0x400000000000L & l) != 0L)
                  {
                     if (jjcurKind > 15)
                        jjcurKind = 15;
                     newStates[jjnewStateCnt + 0] = 272;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 277:
                  if ((0x400000000L & l) != 0L)
                  {
                     if (jjcurKind > 16)
                        jjcurKind = 16;
                     newStates[jjnewStateCnt + 0] = 278;
                     newStates[jjnewStateCnt + 1] = 279;
                     jjnewStateCnt += 2;
                     continue;
                  }
                  else continue;
               case 280:
                  if ((0x20000000000L & l) != 0L)
                  {
                     if (jjcurKind > 17)
                        jjcurKind = 17;
                     newStates[jjnewStateCnt + 0] = 281;
                     newStates[jjnewStateCnt + 1] = 282;
                     jjnewStateCnt += 2;
                     continue;
                  }
                  else continue;
               case 287:
                  if ((0x20000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 283;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 283:
                  if ((0x100000000000L & l) != 0L)
                  {
                     if (jjcurKind > 18)
                        jjcurKind = 18;
                     jjnextStates = jjstates249;
                     break;
                  }
                  else continue;
               case 284:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (jjcurKind > 18)
                        jjcurKind = 18;
                     jjnextStates = jjstates249;
                     break;
                  }
                  else continue;
               case 291:
                  if ((0x800000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 288;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 288:
                  if ((0x4000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 289;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 294:
                  if ((0x2000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 292;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 292:
                  if ((0x100000000000L & l) != 0L)
                  {
                     if (jjcurKind > 20)
                        jjcurKind = 20;
                     newStates[jjnewStateCnt + 0] = 293;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 297:
                  if ((0x2000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 295;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 295:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 21)
                        jjcurKind = 21;
                     newStates[jjnewStateCnt + 0] = 296;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 300:
                  if ((0x2000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 298;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 298:
                  if ((0x40000000000L & l) != 0L)
                  {
                     if (jjcurKind > 22)
                        jjcurKind = 22;
                     newStates[jjnewStateCnt + 0] = 299;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 303:
                  if ((0x2000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 301;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 301:
                  if ((0x800000000L & l) != 0L)
                  {
                     if (jjcurKind > 23)
                        jjcurKind = 23;
                     newStates[jjnewStateCnt + 0] = 302;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 308:
                  if ((0x4000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 304;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 304:
                  if ((0x20000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 305;
                     newStates[jjnewStateCnt + 1] = 306;
                     jjnewStateCnt += 2;
                     continue;
                  }
                  else continue;
               case 313:
                  if ((0x100000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 309;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 309:
                  if ((0x20000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 310;
                     newStates[jjnewStateCnt + 1] = 311;
                     jjnewStateCnt += 2;
                     continue;
                  }
                  else continue;
               case 318:
                  if ((0x4000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 314;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 314:
                  if ((0x20000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 315;
                     newStates[jjnewStateCnt + 1] = 316;
                     jjnewStateCnt += 2;
                     continue;
                  }
                  else continue;
               case 323:
                  if ((0x8000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 319;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 319:
                  if ((0x400000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 320;
                     newStates[jjnewStateCnt + 1] = 321;
                     jjnewStateCnt += 2;
                     continue;
                  }
                  else continue;
               case 328:
                  if ((0x8000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 324;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 324:
                  if ((0x200000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 325;
                     newStates[jjnewStateCnt + 1] = 326;
                     jjnewStateCnt += 2;
                     continue;
                  }
                  else continue;
               case 333:
                  if ((0x8000000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 329;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 329:
                  if ((0x100000000000L & l) != 0L)
                  {
                     newStates[jjnewStateCnt + 0] = 330;
                     newStates[jjnewStateCnt + 1] = 331;
                     jjnewStateCnt += 2;
                     continue;
                  }
                  else continue;
               case 0:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                  {
                     if (jjcurKind > 30)
                        jjcurKind = 30;
                     newStates[jjnewStateCnt + 0] = 0;
                     jjnewStateCnt += 1;
                     continue;
                  }
                  else continue;
               case 334:
                  if ((0xf8000001f8000001L & l) != 0L)
                  {
                     if (jjcurKind > 31)
                        jjcurKind = 31;
                     continue;
                  }
                  else continue;
               case 335:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (jjcurKind > 32)
                        jjcurKind = 32;
                     jjnextStates = jjstates287;
                     break;
                  }
                  else continue;
               case 1:
                  if ((0x10000000L & l) != 0L)
                  {
                     jjnextStates = jjstates288;
                     break;
                  }
                  else continue;
               default : continue;
            }
            j = jjnextStates.length;
            do
            {
               if (jjrounds[k = jjnextStates[--j]] != jjround)
               {
                  jjrounds[k] = jjround;
                  newStates[jjnewStateCnt++] = k;
               }
            } while (j != 0);
         } while(i != 0);
      }
      else
      {
         int i = jjnewStateCnt;
         jjnewStateCnt = 0;
         jjround++;
         int i2 = (curChar & 0xff) >> 6;
         int i1 = ((curChar >> 8) & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         long l1 = 1L << ((curChar >> 8) & 077);
         Outer:
         do
         {
            switch(oldStates[--i])
            {
               case 0:
                  MatchLoop:
                  for(;;)
                  {
                     switch((curChar >> 8))
                     {
                        case 0:
                           if ((jjbitVec0[i2] & l2) == 0L)
                              continue Outer;
                           break MatchLoop;
                        default : break;
                     }
                     continue Outer;
                  }
                  if (jjcurKind > 30)
                     jjcurKind = 30;
                     newStates[jjnewStateCnt + 0] = 0;
                     jjnewStateCnt += 1;
                     continue;
               case 334:
                  MatchLoop:
                  for(;;)
                  {
                     switch((curChar >> 8))
                     {
                        case 0:
                           if ((jjbitVec0[i2] & l2) == 0L)
                              continue Outer;
                           break MatchLoop;
                        default : break;
                     }
                     continue Outer;
                  }
                  if (jjcurKind > 31)
                     jjcurKind = 31;
                  continue;
               default : continue;
            }
         } while(i != 0);
      }
      return;
   }
}
int[] StopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x580L) != 0L)
            return jjstates288;
         if ((active0 & 0x10L) != 0L)
            return jjstates289;
         return null;
      case 1:
         if ((active0 & 0x100L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               matchedToken.kind = 32;
               jjmatchedPos = 1;
            }
            return jjstates292;
         }
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               matchedToken.kind = 32;
               jjmatchedPos = 1;
            }
            return jjstates290;
         }
         return null;
      case 2:
         if ((active0 & 0x100L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               matchedToken.kind = 32;
               jjmatchedPos = 2;
            }
            return jjstates293;
         }
         if ((active0 & 0x80L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               matchedToken.kind = 32;
               jjmatchedPos = 2;
            }
            return jjstates291;
         }
         return null;
      case 3:
         if ((active0 & 0x180L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               matchedToken.kind = 32;
               jjmatchedPos = 3;
            }
            return jjstates287;
         }
         return null;
      case 4:
         if ((active0 & 0x180L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               matchedToken.kind = 32;
               jjmatchedPos = 4;
            }
            return jjstates287;
         }
         return null;
      case 5:
         if ((active0 & 0x180L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               matchedToken.kind = 32;
               jjmatchedPos = 5;
            }
            return jjstates287;
         }
         return null;
      case 6:
         if ((active0 & 0x180L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               matchedToken.kind = 32;
               jjmatchedPos = 6;
            }
            return jjstates287;
         }
         return null;
      case 7:
         if ((active0 & 0x100L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               matchedToken.kind = 32;
               jjmatchedPos = 7;
            }
            return jjstates287;
         }
         if ((active0 & 0x80L) != 0L)
            return jjstates287;
         return null;
      case 8:
         if ((active0 & 0x100L) != 0L)
            return jjstates287;
         return null;
      default : 
         return null;
   }
}
void jjStartNfa_0(int pos, long active0)
{
   if ((jjstartStateSet = StopStringLiteralDfa_0(pos, active0)) != null)
   {
      jjnewStateCnt = jjstartStateSet.length;
      jjMoveNfa_0(jjstartStateSet, jjstateSet2);
      if (jjcurKind != 2147483647)
      {
         matchedToken.kind = jjcurKind;
         jjmatchedPos = pos + 1;
         jjcurKind = 2147483647;
      }
   }
   return;
}
long jjnewActive_00 = 0L, jjoldActive_00 = 0L;
private final void jjMoveStringLiteralDfa0_0() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
         switch(curChar)
         {
            case 92: 
               jjoldActive_00 = 0x580L;
               break;
            case 125: 
               matchedToken.kind = 6;
               break ReturnLoop;
            case 123: 
               matchedToken.kind = 5;
               break ReturnLoop;
            case 13: 
               matchedToken.kind = 2;
               jjoldActive_00 = 0x8L;
               break;
            case 10: 
               matchedToken.kind = 1;
               break ReturnLoop;
            case 0: 
               matchedToken.kind = 4;
               jjstartStateSet = jjstates289;
               break MainLoop;
            default : 
               curPos =  1;
               if (curChar < 128)
                  if ((jjstartStateSet = jjinitStates_0[curChar]) == null)
                     return;
               else 
                  jjstartStateSet = jjallInitStates_0;
               jjnewStateCnt = jjstartStateSet.length;
               jjMoveNfa_0(jjstartStateSet, jjstateSet2);
               if (jjcurKind != 2147483647)
               {
                  matchedToken.kind = jjcurKind;
                  jjcurKind = 2147483647;
               }
               return;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_0(0, jjoldActive_00); 
            curPos = 1;
            throw e;
         }
         jjMoveStringLiteralDfa1_0();
         return;
    }
    curPos = 1;
    curChar = input_stream.readChar();
    jjnewStateCnt = jjstartStateSet.length;
    jjMoveNfa_0(jjstartStateSet, jjstateSet2);
    if (jjcurKind != 2147483647)
    {
       matchedToken.kind = jjcurKind;
       jjmatchedPos = 1;
       jjcurKind = 2147483647;
    }
    curPos = 2;
    return;
   }
   curPos = 1;
   return;
}
private final void jjMoveStringLiteralDfa1_0() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 99: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x100L)) == 0L)
                  break StartNfaLoop;
               break;
            case 39: 
               if ((jjoldActive_00 & 0x400L) != 0L)
               {
                  matchedToken.kind = 10;
                  break ReturnLoop;
               }
               break StartNfaLoop;
            case 10: 
               if ((jjoldActive_00 & 0x8L) != 0L)
               {
                  matchedToken.kind = 3;
                  break ReturnLoop;
               }
               break StartNfaLoop;
            case 102: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x80L)) == 0L)
                  break StartNfaLoop;
               break;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_0(1, jjnewActive_00); 
            curPos = 2;
            throw e;
         }
         jjMoveStringLiteralDfa2_0();
         return;
      }
      jjStartNfa_0(0, jjoldActive_00); 
      curPos = 2;
      return;
    }
   }
   jjmatchedPos = 1;
   curPos = 2;
   return;
}
private final void jjMoveStringLiteralDfa2_0() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 111: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x180L)) == 0L)
                  break StartNfaLoop;
               break;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_0(2, jjoldActive_00); 
            curPos = 3;
            throw e;
         }
         jjMoveStringLiteralDfa3_0();
         return;
      }
      jjStartNfa_0(1, jjnewActive_00); 
      curPos = 3;
      return;
    }
   }
}
private final void jjMoveStringLiteralDfa3_0() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 110: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x80L)) == 0L)
                  break StartNfaLoop;
               break;
            case 108: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x100L)) == 0L)
                  break StartNfaLoop;
               break;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_0(3, jjnewActive_00); 
            curPos = 4;
            throw e;
         }
         jjMoveStringLiteralDfa4_0();
         return;
      }
      jjStartNfa_0(2, jjoldActive_00); 
      curPos = 4;
      return;
    }
   }
}
private final void jjMoveStringLiteralDfa4_0() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 116: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x80L)) == 0L)
                  break StartNfaLoop;
               break;
            case 111: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x100L)) == 0L)
                  break StartNfaLoop;
               break;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_0(4, jjoldActive_00); 
            curPos = 5;
            throw e;
         }
         jjMoveStringLiteralDfa5_0();
         return;
      }
      jjStartNfa_0(3, jjnewActive_00); 
      curPos = 5;
      return;
    }
   }
}
private final void jjMoveStringLiteralDfa5_0() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 116: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x80L)) == 0L)
                  break StartNfaLoop;
               break;
            case 114: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x100L)) == 0L)
                  break StartNfaLoop;
               break;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_0(5, jjnewActive_00); 
            curPos = 6;
            throw e;
         }
         jjMoveStringLiteralDfa6_0();
         return;
      }
      jjStartNfa_0(4, jjoldActive_00); 
      curPos = 6;
      return;
    }
   }
}
private final void jjMoveStringLiteralDfa6_0() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 98: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x80L)) == 0L)
                  break StartNfaLoop;
               break;
            case 116: 
               if (((jjoldActive_00 = jjnewActive_00 & 0x100L)) == 0L)
                  break StartNfaLoop;
               break;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_0(6, jjoldActive_00); 
            curPos = 7;
            throw e;
         }
         jjMoveStringLiteralDfa7_0();
         return;
      }
      jjStartNfa_0(5, jjnewActive_00); 
      curPos = 7;
      return;
    }
   }
}
private final void jjMoveStringLiteralDfa7_0() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 98: 
               if (((jjnewActive_00 = jjoldActive_00 & 0x100L)) == 0L)
                  break StartNfaLoop;
               break;
            case 108: 
               if ((jjoldActive_00 & 0x80L) != 0L)
               {
                  matchedToken.kind = 7;
                  jjstartStateSet = jjstates287;
                  break MainLoop;
               }
               break StartNfaLoop;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_0(7, jjnewActive_00); 
            curPos = 8;
            throw e;
         }
         jjMoveStringLiteralDfa8_0();
         return;
      }
      jjStartNfa_0(6, jjoldActive_00); 
      curPos = 8;
      return;
    }
    jjmatchedPos = 7;
    curPos = 8;
    curChar = input_stream.readChar();
    jjnewStateCnt = jjstartStateSet.length;
    jjMoveNfa_0(jjstartStateSet, jjstateSet2);
    if (jjcurKind != 2147483647)
    {
       matchedToken.kind = jjcurKind;
       jjmatchedPos = 8;
       jjcurKind = 2147483647;
    }
    curPos = 9;
    return;
   }
}
private final void jjMoveStringLiteralDfa8_0() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 108: 
               if ((jjnewActive_00 & 0x100L) != 0L)
               {
                  matchedToken.kind = 8;
                  jjstartStateSet = jjstates287;
                  break MainLoop;
               }
               break StartNfaLoop;
            default : 
               break StartNfaLoop;
         }
      }
      jjStartNfa_0(7, jjnewActive_00); 
      curPos = 9;
      return;
    }
    jjmatchedPos = 8;
    curPos = 9;
    curChar = input_stream.readChar();
    jjnewStateCnt = jjstartStateSet.length;
    jjMoveNfa_0(jjstartStateSet, jjstateSet2);
    if (jjcurKind != 2147483647)
    {
       matchedToken.kind = jjcurKind;
       jjmatchedPos = 9;
       jjcurKind = 2147483647;
    }
    curPos = 10;
    return;
   }
}
static final int[] jjstates9 = { 4, 5, 6, };
static final int[] jjstates10 = { 7, };
static final int[] jjstates11 = { 8, };
static final int[] jjstates12 = { 9, };
static final int[] jjstates13 = { 10, };
static final int[] jjstates14 = { 14, 6, };
static final int[] jjstates15 = { 13, 14, 6, };
static final int[] jjstates16 = { 12, };
static final int[] jjstates17 = { 15, };
static final int[] jjstates18 = { 16, };
static final int[] jjstates19 = { 17, };
static final int[] jjstates20 = { 18, };
static final int[] jjstates21 = { 22, 6, };
static final int[] jjstates22 = { 21, 22, 6, };
static final int[] jjstates23 = { 20, };
static final int[] jjstates24 = { 23, };
static final int[] jjstates25 = { 24, };
static final int[] jjstates26 = { 25, };
static final int[] jjstates27 = { 26, };
static final int[] jjstates28 = { 27, };
static final int[] jjstates29 = { 31, 6, };
static final int[] jjstates30 = { 30, 31, 6, };
static final int[] jjstates31 = { 29, };
static final int[] jjstates32 = { 32, };
static final int[] jjstates33 = { 33, };
static final int[] jjstates34 = { 34, };
static final int[] jjstates35 = { 35, };
static final int[] jjstates36 = { 36, };
static final int[] jjstates37 = { 40, 6, };
static final int[] jjstates38 = { 39, 40, 6, };
static final int[] jjstates39 = { 38, };
static final int[] jjstates40 = { 41, };
static final int[] jjstates41 = { 42, };
static final int[] jjstates42 = { 43, };
static final int[] jjstates43 = { 44, };
static final int[] jjstates44 = { 45, };
static final int[] jjstates45 = { 49, 6, };
static final int[] jjstates46 = { 48, 49, 6, };
static final int[] jjstates47 = { 47, };
static final int[] jjstates48 = { 50, };
static final int[] jjstates49 = { 51, };
static final int[] jjstates50 = { 52, };
static final int[] jjstates51 = { 53, };
static final int[] jjstates52 = { 57, 6, };
static final int[] jjstates53 = { 56, 57, 6, };
static final int[] jjstates54 = { 55, };
static final int[] jjstates55 = { 58, };
static final int[] jjstates56 = { 59, };
static final int[] jjstates57 = { 60, };
static final int[] jjstates58 = { 61, };
static final int[] jjstates59 = { 62, };
static final int[] jjstates60 = { 66, 6, };
static final int[] jjstates61 = { 65, 66, 6, };
static final int[] jjstates62 = { 64, };
static final int[] jjstates63 = { 67, };
static final int[] jjstates64 = { 68, };
static final int[] jjstates65 = { 69, };
static final int[] jjstates66 = { 70, };
static final int[] jjstates67 = { 71, };
static final int[] jjstates68 = { 75, 6, };
static final int[] jjstates69 = { 74, 75, 6, };
static final int[] jjstates70 = { 73, };
static final int[] jjstates71 = { 76, };
static final int[] jjstates72 = { 77, };
static final int[] jjstates73 = { 78, };
static final int[] jjstates74 = { 79, };
static final int[] jjstates75 = { 80, };
static final int[] jjstates76 = { 84, 6, };
static final int[] jjstates77 = { 83, 84, 6, };
static final int[] jjstates78 = { 82, };
static final int[] jjstates79 = { 85, };
static final int[] jjstates80 = { 86, };
static final int[] jjstates81 = { 87, };
static final int[] jjstates82 = { 88, };
static final int[] jjstates83 = { 89, };
static final int[] jjstates84 = { 90, };
static final int[] jjstates85 = { 94, 6, };
static final int[] jjstates86 = { 93, 94, 6, };
static final int[] jjstates87 = { 92, };
static final int[] jjstates88 = { 95, };
static final int[] jjstates89 = { 96, };
static final int[] jjstates90 = { 97, };
static final int[] jjstates91 = { 101, 6, };
static final int[] jjstates92 = { 100, 101, 6, };
static final int[] jjstates93 = { 99, };
static final int[] jjstates94 = { 102, };
static final int[] jjstates95 = { 103, };
static final int[] jjstates96 = { 104, };
static final int[] jjstates97 = { 105, };
static final int[] jjstates98 = { 109, 6, };
static final int[] jjstates99 = { 108, 109, 6, };
static final int[] jjstates100 = { 107, };
static final int[] jjstates101 = { 110, };
static final int[] jjstates102 = { 111, };
static final int[] jjstates103 = { 112, };
static final int[] jjstates104 = { 113, };
static final int[] jjstates105 = { 114, };
static final int[] jjstates106 = { 118, 6, };
static final int[] jjstates107 = { 117, 118, 6, };
static final int[] jjstates108 = { 116, };
static final int[] jjstates109 = { 119, };
static final int[] jjstates110 = { 120, };
static final int[] jjstates111 = { 121, };
static final int[] jjstates112 = { 122, };
static final int[] jjstates113 = { 126, 6, };
static final int[] jjstates114 = { 125, 126, 6, };
static final int[] jjstates115 = { 124, };
static final int[] jjstates116 = { 127, };
static final int[] jjstates117 = { 128, };
static final int[] jjstates118 = { 129, };
static final int[] jjstates119 = { 130, };
static final int[] jjstates120 = { 131, };
static final int[] jjstates121 = { 135, 6, };
static final int[] jjstates122 = { 134, 135, 6, };
static final int[] jjstates123 = { 133, };
static final int[] jjstates124 = { 136, };
static final int[] jjstates125 = { 137, };
static final int[] jjstates126 = { 138, };
static final int[] jjstates127 = { 139, };
static final int[] jjstates128 = { 140, };
static final int[] jjstates129 = { 144, 6, };
static final int[] jjstates130 = { 143, 144, 6, };
static final int[] jjstates131 = { 142, };
static final int[] jjstates132 = { 145, };
static final int[] jjstates133 = { 146, };
static final int[] jjstates134 = { 147, };
static final int[] jjstates135 = { 148, };
static final int[] jjstates136 = { 149, };
static final int[] jjstates137 = { 153, 6, };
static final int[] jjstates138 = { 152, 153, 6, };
static final int[] jjstates139 = { 151, };
static final int[] jjstates140 = { 154, };
static final int[] jjstates141 = { 155, };
static final int[] jjstates142 = { 159, 6, };
static final int[] jjstates143 = { 158, 159, 6, };
static final int[] jjstates144 = { 157, };
static final int[] jjstates145 = { 160, };
static final int[] jjstates146 = { 161, };
static final int[] jjstates147 = { 162, };
static final int[] jjstates148 = { 163, };
static final int[] jjstates149 = { 164, };
static final int[] jjstates150 = { 165, };
static final int[] jjstates151 = { 169, 6, };
static final int[] jjstates152 = { 168, 169, 6, };
static final int[] jjstates153 = { 167, };
static final int[] jjstates154 = { 170, };
static final int[] jjstates155 = { 171, };
static final int[] jjstates156 = { 172, };
static final int[] jjstates157 = { 173, };
static final int[] jjstates158 = { 174, };
static final int[] jjstates159 = { 175, };
static final int[] jjstates160 = { 179, 6, };
static final int[] jjstates161 = { 178, 179, 6, };
static final int[] jjstates162 = { 177, };
static final int[] jjstates163 = { 180, };
static final int[] jjstates164 = { 181, };
static final int[] jjstates165 = { 185, 6, };
static final int[] jjstates166 = { 184, 185, 6, };
static final int[] jjstates167 = { 183, };
static final int[] jjstates168 = { 186, };
static final int[] jjstates169 = { 187, };
static final int[] jjstates170 = { 188, };
static final int[] jjstates171 = { 189, };
static final int[] jjstates172 = { 190, };
static final int[] jjstates173 = { 194, 6, };
static final int[] jjstates174 = { 193, 194, 6, };
static final int[] jjstates175 = { 192, };
static final int[] jjstates176 = { 195, };
static final int[] jjstates177 = { 196, };
static final int[] jjstates178 = { 197, };
static final int[] jjstates179 = { 198, };
static final int[] jjstates180 = { 199, };
static final int[] jjstates181 = { 203, 6, };
static final int[] jjstates182 = { 202, 203, 6, };
static final int[] jjstates183 = { 201, };
static final int[] jjstates184 = { 204, };
static final int[] jjstates185 = { 205, };
static final int[] jjstates186 = { 206, };
static final int[] jjstates187 = { 207, };
static final int[] jjstates188 = { 211, 6, };
static final int[] jjstates189 = { 210, 211, 6, };
static final int[] jjstates190 = { 209, };
static final int[] jjstates191 = { 212, };
static final int[] jjstates192 = { 216, 6, };
static final int[] jjstates193 = { 215, 216, 6, };
static final int[] jjstates194 = { 214, };
static final int[] jjstates195 = { 217, };
static final int[] jjstates196 = { 218, };
static final int[] jjstates197 = { 219, };
static final int[] jjstates198 = { 220, };
static final int[] jjstates199 = { 221, };
static final int[] jjstates200 = { 222, };
static final int[] jjstates201 = { 223, };
static final int[] jjstates202 = { 224, };
static final int[] jjstates203 = { 228, 6, };
static final int[] jjstates204 = { 227, 228, 6, };
static final int[] jjstates205 = { 226, };
static final int[] jjstates206 = { 229, };
static final int[] jjstates207 = { 230, };
static final int[] jjstates208 = { 231, };
static final int[] jjstates209 = { 232, };
static final int[] jjstates210 = { 233, };
static final int[] jjstates211 = { 237, 6, };
static final int[] jjstates212 = { 236, 237, 6, };
static final int[] jjstates213 = { 235, };
static final int[] jjstates214 = { 241, 6, };
static final int[] jjstates215 = { 240, 241, 6, };
static final int[] jjstates216 = { 239, };
static final int[] jjstates217 = { 242, };
static final int[] jjstates218 = { 243, };
static final int[] jjstates219 = { 244, };
static final int[] jjstates220 = { 248, 6, };
static final int[] jjstates221 = { 247, 248, 6, };
static final int[] jjstates222 = { 246, };
static final int[] jjstates223 = { 249, };
static final int[] jjstates224 = { 253, 6, };
static final int[] jjstates225 = { 252, 253, 6, };
static final int[] jjstates226 = { 251, };
static final int[] jjstates227 = { 256, 257, };
static final int[] jjstates228 = { 256, };
static final int[] jjstates229 = { 259, 260, };
static final int[] jjstates230 = { 259, };
static final int[] jjstates231 = { 258, };
static final int[] jjstates232 = { 263, };
static final int[] jjstates233 = { 262, };
static final int[] jjstates234 = { 264, };
static final int[] jjstates235 = { 267, };
static final int[] jjstates236 = { 266, };
static final int[] jjstates237 = { 268, };
static final int[] jjstates238 = { 269, };
static final int[] jjstates239 = { 272, };
static final int[] jjstates240 = { 271, };
static final int[] jjstates241 = { 273, };
static final int[] jjstates242 = { 274, };
static final int[] jjstates243 = { 275, };
static final int[] jjstates244 = { 279, };
static final int[] jjstates245 = { 278, 279, };
static final int[] jjstates246 = { 282, };
static final int[] jjstates247 = { 281, 282, };
static final int[] jjstates248 = { 286, };
static final int[] jjstates249 = { 284, 285, 286, };
static final int[] jjstates250 = { 283, };
static final int[] jjstates251 = { 289, 290, };
static final int[] jjstates252 = { 289, };
static final int[] jjstates253 = { 288, };
static final int[] jjstates254 = { 293, };
static final int[] jjstates255 = { 292, };
static final int[] jjstates256 = { 296, };
static final int[] jjstates257 = { 295, };
static final int[] jjstates258 = { 299, };
static final int[] jjstates259 = { 298, };
static final int[] jjstates260 = { 302, };
static final int[] jjstates261 = { 301, };
static final int[] jjstates262 = { 306, 307, };
static final int[] jjstates263 = { 306, };
static final int[] jjstates264 = { 305, 306, };
static final int[] jjstates265 = { 304, };
static final int[] jjstates266 = { 311, 312, };
static final int[] jjstates267 = { 311, };
static final int[] jjstates268 = { 310, 311, };
static final int[] jjstates269 = { 309, };
static final int[] jjstates270 = { 316, 317, };
static final int[] jjstates271 = { 316, };
static final int[] jjstates272 = { 315, 316, };
static final int[] jjstates273 = { 314, };
static final int[] jjstates274 = { 321, 322, };
static final int[] jjstates275 = { 321, };
static final int[] jjstates276 = { 320, 321, };
static final int[] jjstates277 = { 319, };
static final int[] jjstates278 = { 326, 327, };
static final int[] jjstates279 = { 326, };
static final int[] jjstates280 = { 325, 326, };
static final int[] jjstates281 = { 324, };
static final int[] jjstates282 = { 331, 332, };
static final int[] jjstates283 = { 331, };
static final int[] jjstates284 = { 330, 331, };
static final int[] jjstates285 = { 329, };
static final int[] jjstates286 = { 337, 338, };
static final int[] jjstates287 = { 335, 336, 337, 338, };
static final int[] jjstates288 = { 2, 11, 19, 28, 37, 46, 54, 63, 72, 81, 91, 98, 106, 115, 123, 132, 
141, 150, 156, 166, 176, 182, 191, 200, 208, 213, 225, 234, 238, 245, 250, 254, 
255, 261, 265, 270, 276, 277, 280, 287, 291, 294, 297, 300, 303, 308, 313, 318, 
323, 328, 333, 334, 335, };
static final int[] jjallInitStates_0 = { 0, 1, };
static final int[] jjstates289 = { 2, 11, 19, 28, 37, 46, 54, 63, 72, 81, 91, 98, 106, 115, 123, 132, 
141, 150, 156, 166, 176, 182, 191, 200, 208, 213, 225, 234, 238, 245, 250, 254, 
255, 261, 265, 270, 276, 277, 280, 287, 291, 294, 297, 300, 303, 308, 313, 318, 
323, 328, 333, 0, 334, 335, };
static final int[] jjstates290 = { 53, 62, 71, 80, 90, 97, 105, 114, 256, 258, 304, 335, 336, 337, 338, };
static final int[] jjstates291 = { 52, 61, 70, 79, 89, 335, 336, 337, 338, };
static final int[] jjstates292 = { 27, 36, 288, 335, 336, 337, 338, };
static final int[] jjstates293 = { 26, 335, 336, 337, 338, };
static final int[][] jjinitStates_0 = {
jjallInitStates_0, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, null, 
jjallInitStates_1, jjallInitStates_1, null, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjstates0, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, null, jjallInitStates_1, null, 
jjallInitStates_1, jjallInitStates_1, };

private final void jjMoveNfa_3(int[] oldStates, int[] newStates)
{
   int j, k;
   MainLoop :
   for (;;)
   {
      if (curChar < 64)
      {
         int i = jjnewStateCnt;
         jjnewStateCnt = 0;
         jjround++;
         long l = 1L << curChar;
         do
         {
            switch(oldStates[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (jjcurKind > 63)
                        jjcurKind = 63;
                     newStates[jjnewStateCnt + 0] = 0;
                     jjnewStateCnt += 1;
                     return;
                  }
                  else continue;
               default : continue;
            }
         } while(i != 0);
      }
      else if (curChar < 128)
      {
   jjnewStateCnt = 0;
   return;
      }
      else
      {
         jjnewStateCnt = 0;
         return;
      }
      return;
   }
}
int[] StopStringLiteralDfa_3(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjallInitStates_1;
         return null;
      default : 
         return null;
   }
}
void jjStartNfa_3(int pos, long active0, long active1)
{
   if ((jjstartStateSet = StopStringLiteralDfa_3(pos, active0, active1)) != null)
   {
      jjnewStateCnt = jjstartStateSet.length;
      jjMoveNfa_3(jjstartStateSet, jjstateSet2);
      if (jjcurKind != 2147483647)
      {
         matchedToken.kind = jjcurKind;
         jjmatchedPos = pos + 1;
         jjcurKind = 2147483647;
      }
   }
   return;
}
long jjnewActive_30 = 0L, jjoldActive_30 = 0L,
            jjnewActive_31 = 0L, jjoldActive_31 = 0L;
private final void jjMoveStringLiteralDfa0_3() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
         switch(curChar)
         {
            case 92: 
               jjoldActive_30 = 0x7000000000000000L;
               jjoldActive_31 = 0L;
               break;
            case 59: 
               matchedToken.kind = 64;
               break ReturnLoop;
            case 125: 
               matchedToken.kind = 65;
               break ReturnLoop;
            case 13: 
               matchedToken.kind = 57;
               jjoldActive_30 = 0x400000000000000L;
               jjoldActive_31 = 0L;
               break;
            case 10: 
               matchedToken.kind = 56;
               break ReturnLoop;
            case 0: 
               matchedToken.kind = 59;
               jjstartStateSet = jjallInitStates_1;
               break MainLoop;
            default : 
               curPos =  1;
               if (curChar < 128)
                  if ((jjstartStateSet = jjinitStates_3[curChar]) == null)
                     return;
               else 
                  jjstartStateSet = jjallInitStates_3;
               jjnewStateCnt = jjstartStateSet.length;
               jjMoveNfa_3(jjstartStateSet, jjstateSet2);
               if (jjcurKind != 2147483647)
               {
                  matchedToken.kind = jjcurKind;
                  jjcurKind = 2147483647;
               }
               return;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_3(0, jjoldActive_30, jjoldActive_31); 
            curPos = 1;
            throw e;
         }
         jjMoveStringLiteralDfa1_3();
         return;
    }
    curPos = 1;
    curChar = input_stream.readChar();
    jjnewStateCnt = jjstartStateSet.length;
    jjMoveNfa_3(jjstartStateSet, jjstateSet2);
    if (jjcurKind != 2147483647)
    {
       matchedToken.kind = jjcurKind;
       jjmatchedPos = 1;
       jjcurKind = 2147483647;
    }
    curPos = 2;
    return;
   }
   curPos = 1;
   return;
}
private final void jjMoveStringLiteralDfa1_3() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 98: 
               if (((jjnewActive_30 = jjoldActive_30 & 0x4000000000000000L)) == 0L)
                  break StartNfaLoop;
               jjnewActive_31 = 0L;
               break;
            case 114: 
               if (((jjnewActive_30 = jjoldActive_30 & 0x1000000000000000L)) == 0L)
                  break StartNfaLoop;
               jjnewActive_31 = 0L;
               break;
            case 10: 
               if ((jjoldActive_30 & 0x400000000000000L) != 0L)
               {
                  matchedToken.kind = 58;
                  break ReturnLoop;
               }
               break StartNfaLoop;
            case 103: 
               if (((jjnewActive_30 = jjoldActive_30 & 0x2000000000000000L)) == 0L)
                  break StartNfaLoop;
               jjnewActive_31 = 0L;
               break;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_3(1, jjnewActive_30, jjnewActive_31); 
            curPos = 2;
            throw e;
         }
         jjMoveStringLiteralDfa2_3();
         return;
      }
      jjStartNfa_3(0, jjoldActive_30, jjoldActive_31); 
      curPos = 2;
      return;
    }
   }
   jjmatchedPos = 1;
   curPos = 2;
   return;
}
private final void jjMoveStringLiteralDfa2_3() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 114: 
               if (((jjoldActive_30 = jjnewActive_30 & 0x2000000000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 108: 
               if (((jjoldActive_30 = jjnewActive_30 & 0x4000000000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 101: 
               if (((jjoldActive_30 = jjnewActive_30 & 0x1000000000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_3(2, jjoldActive_30, 0L);
            curPos = 3;
            throw e;
         }
         jjMoveStringLiteralDfa3_3();
         return;
      }
      jjStartNfa_3(1, jjnewActive_30, 0L);
      curPos = 3;
      return;
    }
   }
}
private final void jjMoveStringLiteralDfa3_3() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 100: 
               if ((jjoldActive_30 & 0x1000000000000000L) != 0L)
               {
                  matchedToken.kind = 60;
                  break ReturnLoop;
               }
               break StartNfaLoop;
            case 117: 
               if (((jjnewActive_30 = jjoldActive_30 & 0x4000000000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            case 101: 
               if (((jjnewActive_30 = jjoldActive_30 & 0x2000000000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_3(3, jjnewActive_30, 0L);
            curPos = 4;
            throw e;
         }
         jjMoveStringLiteralDfa4_3();
         return;
      }
      jjStartNfa_3(2, jjoldActive_30, 0L);
      curPos = 4;
      return;
    }
   }
   jjmatchedPos = 3;
   curPos = 4;
   return;
}
private final void jjMoveStringLiteralDfa4_3() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 101: 
               if ((jjnewActive_30 & 0x4000000000000000L) != 0L)
               {
                  matchedToken.kind = 62;
                  break ReturnLoop;
               }
               if (((jjoldActive_30 = jjnewActive_30 & 0x2000000000000000L)) == 0L)
                  break StartNfaLoop;
               break;
            default : 
               break StartNfaLoop;
         }
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) {
            StopStringLiteralDfa_3(4, jjoldActive_30, 0L);
            curPos = 5;
            throw e;
         }
         jjMoveStringLiteralDfa5_3();
         return;
      }
      jjStartNfa_3(3, jjnewActive_30, 0L);
      curPos = 5;
      return;
    }
   }
   jjmatchedPos = 4;
   curPos = 5;
   return;
}
private final void jjMoveStringLiteralDfa5_3() throws java.io.IOException
{
   ReturnLoop:
   for (;;)
   {
    MainLoop:
    for (;;)
    {
      StartNfaLoop:
      for (;;)
      { 
         switch(curChar)
         {
            case 110: 
               if ((jjoldActive_30 & 0x2000000000000000L) != 0L)
               {
                  matchedToken.kind = 61;
                  break ReturnLoop;
               }
               break StartNfaLoop;
            default : 
               break StartNfaLoop;
         }
      }
      jjStartNfa_3(4, jjoldActive_30, 0L);
      curPos = 6;
      return;
    }
   }
   jjmatchedPos = 5;
   curPos = 6;
   return;
}
static final int[] jjallInitStates_3 = jjallInitStates_1;
static final int[][] jjinitStates_3 = {
jjallInitStates_1, null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, jjallInitStates_1, 
jjallInitStates_1, jjallInitStates_1, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, null, null, null, 
null, null, };

public static final String[] jjstrLiteralImages = {
null, null, null, null, null, "\173", "\175", 
"\134\146\157\156\164\164\142\154", "\134\143\157\154\157\162\164\142\154", null, "\134\47", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\173", null, null, "\134\146\156\151\154\40", "\134\146\162\157\155\141\156\40", 
"\134\146\163\167\151\163\163\40", "\134\146\155\157\144\145\162\156\40", "\134\146\144\145\143\157\162\40", 
"\134\146\163\143\162\151\160\164\40", "\134\146\164\145\143\150\40", "\134\146\142\151\144\151\40", null, null, 
"\175", null, null, null, null, "\134\162\145\144", "\134\147\162\145\145\156", 
"\134\142\154\165\145", null, "\73", "\175", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "WithinHexChar", 
   "WithinFontTable", 
   "WithinColorTable", 
};
static final long[] jjtoToken = 
{
0xf0fffc21ffffffe0L,
0x3L,
};
static final long[] jjtoSkip = 
{
0xf0003de0000001eL,
0x0L,
};
private ASCII_CharStream input_stream;
private int[] jjrounds = new int[339];
private int[] jjstateSet1 = new int[339];
private int[] jjstateSet2 = new int[339];
private int[] jjnextStates;
int curPos;
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
int jjcurKind = 2147483647;
RTFTokenManager jjme;
public RTFTokenManager(ASCII_CharStream stream)
{
input_stream = stream;
jjme = this;
}
public RTFTokenManager(ASCII_CharStream stream, int lexState)
{
input_stream = stream;
jjme = this;
   if (lexState >= 4 || lexState < 0)
   {
      System.out.println("Error: Ignoring invalid lexical state : " + lexState + ". Starting lexer in DEFAULT state.");
      curLexState = defaultLexState;
   }
   else
      curLexState = lexState;
}
public void ReInit(ASCII_CharStream stream)
{
int i;
jjcurKind = 2147483647;
curPos = jjmatchedPos = jjnewStateCnt = jjround = 0;
jjstartStateSet = null;
curChar = (char)0;
jjEOFSeen = false;
curLexState = defaultLexState;
input_stream = stream;
for (i = 339; i-- > 0;)
   jjrounds[i] = 0;
}
public void ReInit(ASCII_CharStream stream, int lexState)
{
int i;
jjcurKind = 2147483647;
curPos = jjmatchedPos = jjnewStateCnt = jjround = 0;
jjstartStateSet = null;
curChar = (char)0;
jjEOFSeen = false;
   if (lexState >= 4 || lexState < 0)
   {
      System.out.println("Error: Ignoring invalid lexical state : " + lexState + ". Reinitialzing lexer in DEFAULT state.");
      curLexState = defaultLexState;
   }
   else
      curLexState = lexState;
input_stream = stream;
for (i = 339; i-- > 0;)
   jjrounds[i] = 0;
}
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      System.out.println("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.");
   else
      curLexState = lexState;
}


int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
private boolean jjEOFSeen = false;
int[] jjtmpStates = jjstateSet1;
int jjmatchedPos;
Token matchedToken;
Token jjspecialToken;
private int[] jjstartStateSet;

public Token getNextToken() throws ParseError
{
  matchedToken = new Token();

  EOFLoop : for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      matchedToken.endLine = matchedToken.beginLine = input_stream.getBeginLine();
      matchedToken.endColumn = matchedToken.beginColumn = input_stream.getBeginColumn();
      matchedToken.kind = 0;
      matchedToken.image = "";
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   try
   {
    for (;;)
    {
     switch(curLexState)
     {
     case 0:
     {
      matchedToken.kind = 2147483647;
      jjmatchedPos = 0;
      jjMoveStringLiteralDfa0_0();
      while (jjnewStateCnt != 0)
      {
         curChar = input_stream.readChar();
         jjMoveNfa_0(jjstateSet1 = jjstateSet2, jjstateSet2 = jjtmpStates);
         jjtmpStates = jjstateSet1;
         if (jjcurKind != 2147483647)
         {
            matchedToken.kind = jjcurKind;
            jjcurKind = 2147483647;
            jjmatchedPos = curPos++;
         }
         else
            curPos++;
      }
      break;
      }
     case 1:
     {
      matchedToken.kind = 2147483647;
      jjmatchedPos = 0;
      jjMoveStringLiteralDfa0_1();
      while (jjnewStateCnt != 0)
      {
         curChar = input_stream.readChar();
         jjMoveNfa_1(jjstateSet1 = jjstateSet2, jjstateSet2 = jjtmpStates);
         jjtmpStates = jjstateSet1;
         if (jjcurKind != 2147483647)
         {
            matchedToken.kind = jjcurKind;
            jjcurKind = 2147483647;
            jjmatchedPos = curPos++;
         }
         else
            curPos++;
      }
      break;
      }
     case 2:
     {
      matchedToken.kind = 2147483647;
      jjmatchedPos = 0;
      jjMoveStringLiteralDfa0_2();
      while (jjnewStateCnt != 0)
      {
         curChar = input_stream.readChar();
         jjMoveNfa_2(jjstateSet1 = jjstateSet2, jjstateSet2 = jjtmpStates);
         jjtmpStates = jjstateSet1;
         if (jjcurKind != 2147483647)
         {
            matchedToken.kind = jjcurKind;
            jjcurKind = 2147483647;
            jjmatchedPos = curPos++;
         }
         else
            curPos++;
      }
      break;
      }
     case 3:
     {
      matchedToken.kind = 2147483647;
      jjmatchedPos = 0;
      jjMoveStringLiteralDfa0_3();
      while (jjnewStateCnt != 0)
      {
         curChar = input_stream.readChar();
         jjMoveNfa_3(jjstateSet1 = jjstateSet2, jjstateSet2 = jjtmpStates);
         jjtmpStates = jjstateSet1;
         if (jjcurKind != 2147483647)
         {
            matchedToken.kind = jjcurKind;
            jjcurKind = 2147483647;
            jjmatchedPos = curPos++;
         }
         else
            curPos++;
      }
      break;
      }
     }

      if (matchedToken.kind != 2147483647)
      {
         if (jjmatchedPos + 1 < curPos)
            input_stream.backup(curPos - jjmatchedPos - 1);

         if ((jjtoToken[matchedToken.kind >> 6] &
             (1L << (matchedToken.kind & 077))) != 0L)
         {
            TokenLexicalActions();
            return matchedToken;
         }
         else
         {
            continue EOFLoop;
         }
      }
      else
      {
         jjme.error_line = input_stream.getEndLine();
         jjme.error_column = input_stream.getEndColumn();
         input_stream.backup(1);
         jjme.error_after = curPos <= 1 ? "" : jjadd_escapes(input_stream.GetImage());
         jjme.LexicalError();

         throw new ParseError();
      }
    }
   }
   catch (java.io.IOException e)
   {
      switch(curLexState)
      {
         default : break;
      }
      if (matchedToken.kind != 2147483647 && matchedToken.kind != 0)
      {
         if (jjmatchedPos + 1 < curPos)
            input_stream.backup(curPos - jjmatchedPos - 1);

         if ((jjtoToken[matchedToken.kind >> 6] &
             (1L << (matchedToken.kind & 077))) != 0L)
         {
            TokenLexicalActions();
            return matchedToken;
         }
         else
         {
            continue EOFLoop;
         }
      }

      jjme.error_line = input_stream.getEndLine();
      jjme.error_column = input_stream.getEndColumn();
      input_stream.backup(1);
      jjEOFSeen = true;
      jjme.error_after = curPos <= 1 ? "" : jjadd_escapes(input_stream.GetImage());
      jjme.LexicalError();

      throw new ParseError();
   }
  }
}

protected int error_line, error_column;
protected String error_after;
protected void LexicalError()
{
   System.err.println("Lexical error at line " +
        error_line + ", column " +
        error_column + ".  Encountered: " +
        (jjEOFSeen ? "<EOF>" : ("\"" + jjadd_escapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar + "), ") +
        "after : \"" + jjme.error_after + "\"");
}
final void TokenLexicalActions()
{
   if ((matchedToken.image = jjstrLiteralImages[matchedToken.kind]) == null)
      matchedToken.image = input_stream.GetImage();
   matchedToken.beginLine = input_stream.getBeginLine();
   matchedToken.beginColumn = input_stream.getBeginColumn();
   matchedToken.endLine = input_stream.getEndLine();
   matchedToken.endColumn = input_stream.getEndColumn();

   switch(matchedToken.kind)
   {
      case 7 :
         curLexState = 2;
         break;
      case 8 :
         curLexState = 3;
         break;
      case 10 :
         curLexState = 1;
         break;
      case 37 :
         curLexState = 0;
         break;
      case 55 :
         curLexState = 0;
         break;
      case 65 :
         curLexState = 0;
         break;
      default : 
         break;
   }
}
}
